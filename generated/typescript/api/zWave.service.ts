/**
 * home-iot-api
 * Joel's API for the EatBacon IOT project
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiResponse } from '../model/apiResponse';
import { DeviceState } from '../model/deviceState';
import { LightingSummary } from '../model/lightingSummary';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ZWaveService {

    protected basePath = 'https://virtserver.swaggerhub.com/hipsterzipster2/iot/1.0.1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLightingSummary(observe?: 'body', reportProgress?: boolean): Observable<LightingSummary>;
    public getLightingSummary(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LightingSummary>>;
    public getLightingSummary(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LightingSummary>>;
    public getLightingSummary(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<LightingSummary>('get',`${this.basePath}/lightingSummary`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param deviceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSwitchState(deviceId: string, observe?: 'body', reportProgress?: boolean): Observable<DeviceState>;
    public getSwitchState(deviceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeviceState>>;
    public getSwitchState(deviceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeviceState>>;
    public getSwitchState(deviceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling getSwitchState.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DeviceState>('get',`${this.basePath}/lighting/switches/${encodeURIComponent(String(deviceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param deviceId 
     * @param value 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDimmer(deviceId: string, value: number, observe?: 'body', reportProgress?: boolean): Observable<ApiResponse>;
    public setDimmer(deviceId: string, value: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResponse>>;
    public setDimmer(deviceId: string, value: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResponse>>;
    public setDimmer(deviceId: string, value: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling setDimmer.');
        }

        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling setDimmer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ApiResponse>('post',`${this.basePath}/lighting/dimmers/${encodeURIComponent(String(deviceId))}/${encodeURIComponent(String(value))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * sets a dimmer to a specific value on a timer
     * @param deviceId 
     * @param value 
     * @param timeunit 
     * @param units 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDimmerTimer(deviceId: string, value: number, timeunit: number, units?: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResponse>;
    public setDimmerTimer(deviceId: string, value: number, timeunit: number, units?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResponse>>;
    public setDimmerTimer(deviceId: string, value: number, timeunit: number, units?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResponse>>;
    public setDimmerTimer(deviceId: string, value: number, timeunit: number, units?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling setDimmerTimer.');
        }

        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling setDimmerTimer.');
        }

        if (timeunit === null || timeunit === undefined) {
            throw new Error('Required parameter timeunit was null or undefined when calling setDimmerTimer.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (units !== undefined && units !== null) {
            queryParameters = queryParameters.set('units', <any>units);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ApiResponse>('post',`${this.basePath}/lighting/dimmers/${encodeURIComponent(String(deviceId))}/${encodeURIComponent(String(value))}/timer/${encodeURIComponent(String(timeunit))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param deviceId 
     * @param value 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setSwitch(deviceId: string, value: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResponse>;
    public setSwitch(deviceId: string, value: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResponse>>;
    public setSwitch(deviceId: string, value: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResponse>>;
    public setSwitch(deviceId: string, value: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling setSwitch.');
        }

        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling setSwitch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ApiResponse>('post',`${this.basePath}/lighting/switches/${encodeURIComponent(String(deviceId))}/${encodeURIComponent(String(value))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * sets a switch to a specific value on a timer
     * @param deviceId 
     * @param value 
     * @param minutes 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setSwitchTimer(deviceId: string, value: string, minutes: number, observe?: 'body', reportProgress?: boolean): Observable<ApiResponse>;
    public setSwitchTimer(deviceId: string, value: string, minutes: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResponse>>;
    public setSwitchTimer(deviceId: string, value: string, minutes: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResponse>>;
    public setSwitchTimer(deviceId: string, value: string, minutes: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling setSwitchTimer.');
        }

        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling setSwitchTimer.');
        }

        if (minutes === null || minutes === undefined) {
            throw new Error('Required parameter minutes was null or undefined when calling setSwitchTimer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ApiResponse>('post',`${this.basePath}/lighting/switches/${encodeURIComponent(String(deviceId))}/${encodeURIComponent(String(value))}/timer/${encodeURIComponent(String(minutes))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
