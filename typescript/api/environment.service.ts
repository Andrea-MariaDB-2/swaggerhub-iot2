/**
 * home-iot-api
 * Joel's API for the EatBacon IOT project
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiResponse } from '../model/apiResponse';
import { ForecastResponse } from '../model/forecastResponse';
import { HeaterState } from '../model/heaterState';
import { TemperatueZoneStatus } from '../model/temperatueZoneStatus';
import { TemperatureSummary } from '../model/temperatureSummary';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EnvironmentService {

    protected basePath = 'https://virtserver.swaggerhub.com/hipsterzipster2/iot/1.0.1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param days 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getForecast(days: number, observe?: 'body', reportProgress?: boolean): Observable<ForecastResponse>;
    public getForecast(days: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ForecastResponse>>;
    public getForecast(days: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ForecastResponse>>;
    public getForecast(days: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (days === null || days === undefined) {
            throw new Error('Required parameter days was null or undefined when calling getForecast.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ForecastResponse>('get',`${this.basePath}/temperature/forecast/${encodeURIComponent(String(days))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * gets the state of the heater
     * @param zoneId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHeaterState(zoneId: string, observe?: 'body', reportProgress?: boolean): Observable<HeaterState>;
    public getHeaterState(zoneId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HeaterState>>;
    public getHeaterState(zoneId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HeaterState>>;
    public getHeaterState(zoneId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (zoneId === null || zoneId === undefined) {
            throw new Error('Required parameter zoneId was null or undefined when calling getHeaterState.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<HeaterState>('get',`${this.basePath}/temperature/${encodeURIComponent(String(zoneId))}/heater`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param zoneId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getZoneTemperature(zoneId: string, observe?: 'body', reportProgress?: boolean): Observable<TemperatueZoneStatus>;
    public getZoneTemperature(zoneId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TemperatueZoneStatus>>;
    public getZoneTemperature(zoneId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TemperatueZoneStatus>>;
    public getZoneTemperature(zoneId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (zoneId === null || zoneId === undefined) {
            throw new Error('Required parameter zoneId was null or undefined when calling getZoneTemperature.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TemperatueZoneStatus>('get',`${this.basePath}/temperature/${encodeURIComponent(String(zoneId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * turns the heater on or off
     * @param zoneId 
     * @param state 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setHeaterState(zoneId: string, state: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResponse>;
    public setHeaterState(zoneId: string, state: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResponse>>;
    public setHeaterState(zoneId: string, state: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResponse>>;
    public setHeaterState(zoneId: string, state: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (zoneId === null || zoneId === undefined) {
            throw new Error('Required parameter zoneId was null or undefined when calling setHeaterState.');
        }

        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling setHeaterState.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ApiResponse>('post',`${this.basePath}/temperature/${encodeURIComponent(String(zoneId))}/heater/${encodeURIComponent(String(state))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public temperatureSummary(observe?: 'body', reportProgress?: boolean): Observable<TemperatureSummary>;
    public temperatureSummary(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TemperatureSummary>>;
    public temperatureSummary(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TemperatureSummary>>;
    public temperatureSummary(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TemperatureSummary>('get',`${this.basePath}/temperature`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
